#!/usr/bin/env node

/**
 * @Authors Arjun Variar & Prakhar Srivastav.
 * @Purpose Integerates POSTMAN Collection runner/tests with CI systems.
 * 
 * Main file which parses the command line arguments and runs Newman, Supports JSON5.
 */

var color   = require('cli-color'),
	program = require('commander'),
	path    = require('path'),
	request = require('unirest'),
	fs      = require('fs'),
	Helpers = require('../src/utilities/Helpers.js'),
	JSON5   = require('json5'),
	Newman  = require('../src/Newman');

function parseArguments() {
	program
	  .version('0.0.1')
	  .usage('[options] file')
	  .option('-c, --collection [file]', 'Specify your Postman Collection [file]', null)
	  .option('-u, --url [url]', 'Specify your Postman Collection [url]', null)
	  .option('-e, --environment [file]', 'Specify your Postman Environment [file]', null);

	program.on('--help', function() {
	  console.log('  Examples:');
	  console.log('');
	  console.log('    newman -c POSTMAN_COLLECTION');
	  console.log('    newman -u POSTMAN_COLLECTION -e POSTMAN_ENVIRONMENT');
	});

	program.parse(process.argv);

	if (!fs.existsSync(program.collection) && !(program.url)) {
		terminateWithError('Please specify a Postman Collection either as a file or a URL');
	}

	if (program.url && !Helpers.isValidUrl(program.url)) {
		terminateWithError('Please specify a valid URL');
	}
}

function terminateWithError(msg) {
	console.warn(color.red(msg));
	process.exit(1);
}

function main() {
	parseArguments();
	
	newmanOptions = {};

	if (program.environment) {
		// in case of environment variable set the envJson property 
 		// on the options object
		newmanOptions.envJson = JSON5.parse(fs.readFileSync(program.environment, 'utf8'));
	}

	if (program.collection) {
		var collectionJson = JSON5.parse(fs.readFileSync(program.collection, 'utf8'));
		Newman.execute(collectionJson, newmanOptions);

	} else {
		request.get(program.url).type('json').end(function(data) {
			if (data.error) {
				terminateWithError('Unable to fetch a valid response. Error: ' + data.code);
			}
			Newman.execute(data.body, newmanOptions);
		});
	}
}

main();
